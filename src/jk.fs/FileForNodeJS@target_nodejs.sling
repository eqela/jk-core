
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2021 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io

class is File private:

class MyFileReader is FileReader is SizedReader is Reader is Closable is SeekableReader
{
	var fd as int
	pvar file as File

	func read(buffer as buffer) as int
	{
		var v = -1
		var sz #used = Buffer.getSize(buffer) as int
		lang "js" {{{
			try {
				v = require("fs").readSync(this.fd, Buffer.from(buffer), 0, sz, null)
			}
			catch(e) {
				this.file.onError("" + e.stack);
				v = -1;
			}
		}}}
		return v
	}

	func getSize as int
	{
		if file:
			return file.getSize()
		return 0
	}

	func close
	{
		if fd >= 0 {
			lang "js" {{{
				require("fs").closeSync(this.fd);
			}}}
			fd = -1
		}
	}

	func setCurrentPosition(n as int64) as bool
	{
		ERROR "Not implemented"
		return false
	}

	func getCurrentPosition as int64
	{
		ERROR "Not implemented"
		return 0
	}
}

class MyFileWriter is FileWriter
{
	pvar path as string
	pvar isAppend as bool
	var fd as int

	func write(buf as buffer, size as int) as int
	{
		assert buf
		var v = -1
		lang "js" {{{
			if(this.isAppend === true) {
				require("fs").appendFileSync(this.path, Buffer.from(buf));
			}
			else {
				let fs = require("fs");
				this.fd = fs.openSync(this.path, 'w');
				v = fs.writeSync(this.fd, Buffer.from(buf), 0, size, 0)
			}
		}}}
		return v
	}

	func close
	{
		if fd >= 0 {
			lang "js" {{{
				require("fs").closeSync(this.fd);
			}}}
			fd = -1
		}
	}

}

var path as string

func forPath(path as string) static as File
{
	var v = new this()
	v.setPath(path)
	return v
}

func entry(name as string) override as File
{
	var pp as string
	lang "js" {{{
		pp = require("path").join(this.path, name);
	}}}
	return forPath(pp)
}

func move(dest as File, replace as bool) override as bool
{
	assert path
	var rr = true
	lang "js" {{{
		try {
			require("fs").renameSync(this.path, dest.path);
		} catch (err) {
			console.error(err);
			rr = false;
		}
	}}}
	return rr
}

func touch override as bool
{
	assert path
	var rr = true
	lang "js" {{{
		try {
			require("fs").openSync(this.path, 'w');
		} catch (err) {
			console.error(err);
			rr = false;
		}
	}}}
	return rr
}

func read override as FileReader
{
	var fd as int
	lang "js" {{{
		try {
			fd = require("fs").openSync(this.path, "r");
		}
		catch(e) {
			fd = -1;
		}
	}}}
	assert fd >= 0
	var v #used = new MyFileReader()
	v.setFile(this)
	v.fd = fd
	return v
}

func write override as FileWriter
{
	var v = new MyFileWriter()
	v.setPath(path)
	return v
}

func append override as FileWriter
{
	assert path
	var v = new MyFileWriter()
	v.setPath(path)
	v.setIsAppend(true)
	return v
}

func stat override as FileInfo
{
	lang "js" {{{
		let ss = require("fs").statSync(this.path);
		if(!ss) {
			return(null);
		}
	}}}
	var v = new FileInfo()
	v.setFile(this)
	v.setSize(lang "js" int {{{ ss.size }}})
	v.setCreateTime(lang "js" long {{{ ss.ctimeMs / 1000.0 }}})
	v.setAccessTime(lang "js" long {{{ ss.atimeMs / 1000.0 }}})
	v.setModifyTime(lang "js" long {{{ ss.mtimeMs / 1000.0 }}})
	v.setOwnerUser(lang "js" int {{{ ss.uid }}})
	v.setOwnerGroup(lang "js" int {{{ ss.gid }}})
	v.setMode(lang "js" int {{{ ss.mode }}})
	v.setExecutable(false)
	if lang "js" bool {{{ ss.isFile() }}} {
		v.setType(FileInfo.FILE_TYPE_FILE)
	}
	else if lang "js" bool {{{ ss.isDirectory() }}} {
		v.setType(FileInfo.FILE_TYPE_DIR)
	}
	if lang "js" bool {{{ ss.isSymbolicLink() }}}:
		v.setLink(true)
	return v
}

func isExecutable override as bool
{
	assert path
	var rr as bool
	lang "js" {{{
		let fs = require("fs");
		try {
			fs.accessSync(this.path, fs.constants.X_OK);
			rr = true;
		} catch (err) {
			rr = false;
		}
	}}}
	return rr
}

func createDirectory override as bool
{
	assert path
	var rr = true
	lang "js" {{{
		try {
			require("fs").mkdirSync(this.path);
		} catch (err) {
			console.error(err);
			rr = false;
		}
	}}}
	return rr
}

func createDirectoryRecursive override as bool
{
	assert path
	var rr = true
	lang "js" {{{
		try {
			require("fs").mkdirSync(this.path, {recursive: true});
		} catch (err) {
			console.error(err);
			rr = false;
		}
	}}}
	return rr
}

func removeDirectory override as bool
{
	assert path
	var rr = true
	lang "js" {{{
		try {
			require("fs").rmdirSync(this.path);
		} catch (err) {
			console.error(err);
			rr = false;
		}
	}}}
	return rr
}

func setPath(newPath as string)
{
	lang "js" {{{
		this.path = require("path").normalize(newPath)
	}}}
}

func getPath override as string:
	return path

func remove override as bool
{
	assert path
	var rr = true
	lang "js" {{{
		try {
			require("fs").rmSync(this.path);
		} catch (err) {
			console.error(err);
			rr = false;
		}
	}}}
	return rr
}

func makeExecutable override as bool
{
	assert path
	var rr = true
	lang "js" {{{
		try {
			let fs = require("fs");
			fs.openSync(this.path, fs.constants.S_IXUSR);
		} catch (err) {
			console.error(err);
			rr = false;
		}
	}}}
	return rr
}

func entries override as Iterator<File>
{
	assert path
	var files = new vector<string>
	var v = new vector<File>
	lang "js" {{{
		try {
			const dir = require("fs").opendirSync(this.path);
			let dirent;
			while ((dirent = dir.readSync()) !== null) {
				files.push(dirent.name);
			}
			dir.closeSync();
		} catch (err) {
			console.error(err);
		}
	}}}
	if not files:
		return null
	foreach path in files {
		var ff = this.forPath(this.path .. "/" .. path)
		Vector.append(v, ff)
	}
	var entries as Iterator<File> = Vector.iterate(v)
	return entries
}
