
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2021 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is BooleanObject:

meta
{
	description [[
		The Boolean class provides convenience methods for dealing with boolean values
		(either true or false).
	]]
}

func forValue(value as bool) static as this:
	return new this(value)

func asBoolean(obj as dynamic, defval as bool = false) static as bool #deprecated
{
	meta {
		description [[
			Converts the given object to a boolean value, as much as is possible. Various
			different objects can be supplied (including instances of BooleanObject, IntegerObject,
			StringObject, DoubleObject, CharacterObject, ObjectWithSize as well as strings.
			This method is simply an alias of asValue.
		]]
	}
	return asValue(obj, defval)
}

func asValue(obj as dynamic, defval as bool) static as bool
{
	meta {
		description [[
			Converts the given object to boolean and returns its value if possible, otherwise returns
			the value given in "defval", if the conversion could not be performed. Various different
			objects can be supplied (including instances of BooleanObject, IntegerObject, StringObject,
			DoubleObject, CharacterObject, ObjectWithSize as well as strings.
		]]
	}
	var v = asObject(obj)
	if not v:
		return defval
	return v.toBoolean()
}

func asObject(obj as dynamic) static as this
{
	meta {
		description [[
			Converts the given object to boolean if possible and returns a Boolean object instance or
			null if the conversion could not be performed. Various different objects can be supplied
			(including instances of BooleanObject, IntegerObject, StringObject, DoubleObject,
			CharacterObject, ObjectWithSize as well as strings.
		]]
	}
	if obj == null:
		return null
	if obj is bool:
		return new this(obj as bool)
	if obj is this:
		return obj as! this
	if obj is BooleanObject {
		var bo = obj as! BooleanObject
		return new this(bo.toBoolean())
	}
	if obj is int {
		if obj as int == 0:
			return new this(false)
		return new this(true)
	}
	if obj is IntegerObject {
		if (obj as! IntegerObject).toInteger() == 0:
			return new this(false)
		return new this(true)
	}
	if obj is long {
		if obj as long == 0:
			return new this(false)
		return new this(true)
	}
	if obj is LongIntegerObject {
		if (obj as! LongIntegerObject).toLong() == 0:
			return new this(false)
		return new this(true)
	}
	if obj is string {
		var str = String.toLowerCase(obj as! string)
		if str == "yes" || str == "true" || str == "1":
			return new this(true)
		if str == "no" || str == "false" || str == "0":
			return new this(false)
		return null
	}
	if obj is StringObject {
		var str = (obj as! StringObject).toString()
		if str {
			str = String.toLowerCase(str)
			if str == "yes" || str == "true" || str == "1":
				return new this(true)
			if str == "no" || str == "false" || str == "0":
				return new this(false)
		}
		return null
	}
	if obj is double {
		if obj as double == 0.0:
			return new this(false)
		return new this(true)
	}
	if obj is DoubleObject {
		if (obj as! DoubleObject).toDouble() == 0.0:
			return new this(false)
		return new this(true)
	}
	if obj is char {
		if obj as int == 0:
			return new this(false)
		return new this(true)
	}
	if obj is CharacterObject {
		if ((obj as! CharacterObject).toCharacter() as int) == 0:
			return new this(false)
		return new this(true)
	}
	if obj is ObjectWithSize {
		var sz = (obj as! ObjectWithSize).getSize()
		if sz == 0:
			return new this(false)
		return new this(true)
	}
	return null
}

ctor:
	nop

ctor(value as bool):
	setValue(value)

pvar value as bool

func toBoolean as bool:
	return value
