
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2021 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LongIntegerObject:

func forValue(value as long) static as this:
	return new this(value)

func asLong(obj as dynamic, defval as long = 0L) static as long #deprecated:
	return asValue(obj, defval)

func asValue(obj as dynamic, defval as long) static as long
{
	var v = asObject(obj)
	if not v:
		return defval
	return v.toLong()
}

func asObject(obj as dynamic) static as this
{
	if not obj:
		return null
	if obj is long:
		return new this(obj as long)
	if obj is this:
		return obj as! this
	if obj is LongIntegerObject {
		var oi = obj as! LongIntegerObject
		return new this(oi.toLong())
	}
	if obj is int {
		var v = obj as int
		return new this(v as long)
	}
	if obj is IntegerObject {
		var oi = obj as! IntegerObject
		return new this(oi.toInteger() as long)
	}
	if obj is string:
		return new this(String.toLong(obj as! string))
	if obj is StringObject:
		return new this(String.toLong((obj as! StringObject).toString()))
	if obj is double {
		var v = obj as double
		var vv = v as long
		return new this(vv)
	}
	if obj is DoubleObject {
		var od = obj as! DoubleObject
		var vv = od.toDouble() as long
		return new this(vv)
	}
	if obj is bool {
		if obj as bool == true:
			return new this(1L)
		return new this(0L)
	}
	if obj is BooleanObject {
		if (obj as! BooleanObject).toBoolean():
			return new this(1L)
		return new this(0L)
	}
	if obj is char {
		var v = obj as char
		return new this(v as long)
	}
	if obj is CharacterObject {
		var oc = obj as! CharacterObject
		return new this(oc.toCharacter() as long)
	}
	return null
}

ctor:
	nop

ctor(value as long):
	setValue(value)

pvar value as long

func add(amount as long):
	value += amount

func toLong as long:
	return value
