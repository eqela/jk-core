
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2021 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is CharacterObject:

func forValue(value as char) static as this:
	return new this(value)

func asValue(obj as dynamic, defval as char) static as char
{
	var v = asObject(obj)
	if not v:
		return defval
	return v.toCharacter()
}

func asObject(obj as dynamic) static as this
{
	if obj == null:
		return null
	if obj is char:
		return new this(obj as char)
	if obj is this:
		return obj as! this
	if obj is CharacterObject {
		var od = obj as! CharacterObject
		return new this(od.toCharacter())
	}
	if obj is int {
		var v = obj as int
		return new this(v as char)
	}
	if obj is IntegerObject {
		var oi = obj as! IntegerObject
		return new this(oi.toInteger() as char)
	}
	if obj is long {
		var v = obj as long
		return new this(v as char)
	}
	if obj is LongIntegerObject {
		var oi = obj as! LongIntegerObject
		return new this(oi.toLong() as char)
	}
	if obj is string:
		return new this(String.getChar(obj as! string, 0))
	if obj is StringObject:
		return new this(String.getChar((obj as! StringObject).toString(), 0))
	if obj is double {
		var v = obj as double
		return new this(v as char)
	}
	if obj is DoubleObject {
		var oc = obj as! DoubleObject
		return new this(oc.toDouble() as char)
	}
	return null
}

func toUppercase(c as char) static as char
{
	if c >= 'a' && c <= 'z':
		return (c - 'a' + 'A') as char
	return c
}

func toLowercase(c as char) static as char
{
	if c >= 'A' && c <= 'Z':
		return (c - 'A' + 'a') as char
	return c
}

func isDigit(c as char) static as bool:
	return c >= '0' && c <='9'

func isLowercaseAlpha(c as char) static as bool:
	return c >= 'a' && c <= 'z'

func isUppercaseAlpha(c as char) static as bool:
	return c >= 'A' && c <= 'Z'

func isHexDigit(c as char) static as bool
{
	var v = (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F') || (c >= '0' && c <= '9')
	return v
}

func isAlnum(c as char) static as bool #deprecated
{
	var v = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')
	return v
}

func isAlpha(c as char) static as bool
{
	var v = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')
	return v
}

func isAlphaNumeric(c as char) static as bool
{
	var v = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')
	return v
}

func isLowercaseAlphaNumeric(c as char) static as bool
{
	var v = (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')
	return v
}

func isUppercaseAlphaNumeric(c as char) static as bool
{
	var v = (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')
	return v
}

func isEOF(c as char) static as bool:
	return c == 0 || c == -1

func getHexDigit(c as char) static as int
{
	var v as int
	if c >= '0' && c <= '9' {
		v = (c - '0') as int
	}
	else if c >= 'a' && c <= 'f' {
		v = (10 + c - 'a') as int
	}
	else if c >= 'A' && c <= 'F' {
		v = (10 + c - 'A') as int
	}
	else {
		return 0
	}
	return v
}

ctor:
	nop

ctor(value as char):
	setValue(value)

pvar value as char

func toCharacter as char:
	return value
